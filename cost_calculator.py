"""
–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã AI-–∞–≥–µ–Ω—Ç–æ–≤
"""

from dataclasses import dataclass
from typing import Dict, List
import math


@dataclass
class ModelPricing:
    """–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ AI –º–æ–¥–µ–ª–∏ (–Ω–∞ –¥–µ–∫–∞–±—Ä—å 2024)"""
    input_price_per_1k: float  # –¶–µ–Ω–∞ –∑–∞ 1000 –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    output_price_per_1k: float  # –¶–µ–Ω–∞ –∑–∞ 1000 –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    name: str


# –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã (–≤ USD)
MODEL_PRICES = {
    "gpt-4": ModelPricing(0.03, 0.06, "GPT-4"),
    "gpt-4-turbo": ModelPricing(0.01, 0.03, "GPT-4 Turbo"),
    "gpt-3.5-turbo": ModelPricing(0.0015, 0.002, "GPT-3.5 Turbo"),
    "claude-3-opus": ModelPricing(0.015, 0.075, "Claude-3 Opus"),
    "claude-3-sonnet": ModelPricing(0.003, 0.015, "Claude-3 Sonnet"),
    "claude-3-haiku": ModelPricing(0.00025, 0.00125, "Claude-3 Haiku"),
    "local-llm": ModelPricing(0.0, 0.0, "–õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å"),
}


class CostCalculator:
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤—ã–∑–æ–≤–æ–≤ AI-–∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.prices = MODEL_PRICES
        
    def estimate_tokens(self, text: str) -> int:
        """–ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤"""
        # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ 4 —Å–∏–º–≤–æ–ª–∞ = 1 —Ç–æ–∫–µ–Ω –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
        # –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã—à–µ - –ø—Ä–∏–º–µ—Ä–Ω–æ 2-3 —Å–∏–º–≤–æ–ª–∞ = 1 —Ç–æ–∫–µ–Ω
        chars = len(text)
        if any(ord(char) > 127 for char in text):  # –ï—Å—Ç—å –Ω–µ-ASCII —Å–∏–º–≤–æ–ª—ã (—Ä—É—Å—Å–∫–∏–π)
            return math.ceil(chars / 2.5)
        else:
            return math.ceil(chars / 4)
            
    def calculate_single_call_cost(
        self, 
        model_name: str, 
        input_text: str, 
        output_text: str
    ) -> Dict[str, float]:
        """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–¥–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞"""
        
        if model_name not in self.prices:
            return {"error": f"–ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            
        pricing = self.prices[model_name]
        
        input_tokens = self.estimate_tokens(input_text)
        output_tokens = self.estimate_tokens(output_text)
        
        input_cost = (input_tokens / 1000) * pricing.input_price_per_1k
        output_cost = (output_tokens / 1000) * pricing.output_price_per_1k
        total_cost = input_cost + output_cost
        
        return {
            "model": pricing.name,
            "input_tokens": input_tokens,
            "output_tokens": output_tokens,
            "total_tokens": input_tokens + output_tokens,
            "input_cost_usd": round(input_cost, 6),
            "output_cost_usd": round(output_cost, 6),
            "total_cost_usd": round(total_cost, 6),
            "total_cost_rub": round(total_cost * 95, 4)  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å USD/RUB
        }
        
    def calculate_swarm_task_cost(
        self, 
        task_description: str,
        models_used: List[str],
        parallel_execution: bool = False
    ) -> Dict[str, any]:
        """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ —Ä–æ–µ"""
        
        # –¢–∏–ø–∏—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
        task_scenarios = {
            "code_analysis": {
                "input": f"""
–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: –¢—ã AI-–∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–æ–µ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.

–ó–∞–¥–∞—á–∞: {task_description}

–ö–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
```python
def factorial(n):
    if n < 0:
        raise ValueError("Factorial is not defined for negative numbers")
    elif n == 0 or n == 1:
        return 1
    else:
        result = 1
        for i in range(2, n + 1):
            result *= i
        return result

def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n-1) + fibonacci(n-2)

class DataProcessor:
    def __init__(self, data):
        self.data = data
        self.processed = False
    
    def process(self):
        if not self.processed:
            self.data = [x * 2 for x in self.data]
            self.processed = True
        return self.data
```

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç:
1. –ö–∞—á–µ—Å—Ç–≤–∞ –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
2. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
3. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
""",
                "output": """
–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞:

## –ö–∞—á–µ—Å—Ç–≤–æ –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
‚úÖ **–•–æ—Ä–æ—à–æ:**
- –§—É–Ω–∫—Ü–∏–∏ –∏–º–µ—é—Ç –ø–æ–Ω—è—Ç–Ω—ã–µ –∏–º–µ–Ω–∞
- –õ–æ–≥–∏–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- –ï—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤

‚ö†Ô∏è **–ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å:**
- –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç docstrings
- –ù–µ—Ç type hints
- –ö–ª–∞—Å—Å DataProcessor –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏

## –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
üî¥ **–ü—Ä–æ–±–ª–µ–º—ã:**
- `fibonacci()` - —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å O(2^n)
- –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ stack overflow

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
```python
def fibonacci_optimized(n):
    if n <= 1:
        return n
    a, b = 0, 1
    for _ in range(2, n + 1):
        a, b = b, a + b
    return b
```

## –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
- factorial() –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
- fibonacci() –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –≤—Ö–æ–¥—ã
- DataProcessor –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
1. –î–æ–±–∞–≤–∏—Ç—å type hints –∏ docstrings
2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å–∏—é fibonacci
3. –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
4. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ functools.lru_cache –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: 7/10
"""
            },
            
            "code_generation": {
                "input": f"""
–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: –¢—ã AI-–∞–≥–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–æ–µ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.

–ó–∞–¥–∞—á–∞: {task_description}

–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è: –°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é –∑–∞–¥–∞—á –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–æ–µ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ (1-10, –≥–¥–µ 10 - –Ω–∞–∏–≤—ã—Å—à–∏–π)
- –ú–µ—Ç–æ–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–¥–∞—á
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–µ–∑ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
- Thread-safe –æ–ø–µ—Ä–∞—Ü–∏–∏
- –ú–µ—Ç—Ä–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- Type hints –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
""",
                "output": """
```python
import heapq
import threading
import time
from typing import Any, Optional, Dict
from dataclasses import dataclass, field


@dataclass
class Task:
    \"\"\"–ó–∞–¥–∞—á–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º\"\"\"
    id: str
    content: Any
    priority: int = 1  # 1-10, –≥–¥–µ 10 - –Ω–∞–∏–≤—ã—Å—à–∏–π
    created_at: float = field(default_factory=time.time)
    
    def __lt__(self, other):
        # –î–ª—è heapq (min-heap) –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        return self.priority > other.priority


class PriorityTaskQueue:
    \"\"\"
    Thread-safe –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á
    
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
        queue = PriorityTaskQueue()
        queue.put(Task("task1", "content", priority=5))
        task = queue.get()  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–¥–∞—á—É —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    \"\"\"
    
    def __init__(self, max_size: Optional[int] = None):
        self._heap: List[Task] = []
        self._lock = threading.RLock()
        self._max_size = max_size
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        self._total_added = 0
        self._total_removed = 0
        self._created_at = time.time()
    
    def put(self, task: Task) -> bool:
        \"\"\"
        –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
        
        Args:
            task: –ó–∞–¥–∞—á–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, False –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞
        \"\"\"
        with self._lock:
            if self._max_size and len(self._heap) >= self._max_size:
                return False
                
            heapq.heappush(self._heap, task)
            self._total_added += 1
            return True
    
    def get(self, timeout: Optional[float] = None) -> Optional[Task]:
        \"\"\"
        –ò–∑–≤–ª–µ—á—å –∑–∞–¥–∞—á—É —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        
        Args:
            timeout: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ)
            
        Returns:
            –ó–∞–¥–∞—á–∞ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏–ª–∏ None –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
        \"\"\"
        with self._lock:
            if not self._heap:
                return None
                
            task = heapq.heappop(self._heap)
            self._total_removed += 1
            return task
    
    def peek(self) -> Optional[Task]:
        \"\"\"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –±–µ–∑ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è\"\"\"
        with self._lock:
            return self._heap[0] if self._heap else None
    
    def size(self) -> int:
        \"\"\"–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏\"\"\"
        with self._lock:
            return len(self._heap)
    
    def is_empty(self) -> bool:
        \"\"\"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—É—Å—Ç–∞ –ª–∏ –æ—á–µ—Ä–µ–¥—å\"\"\"
        with self._lock:
            return len(self._heap) == 0
    
    def get_metrics(self) -> Dict[str, Any]:
        \"\"\"–ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\"\"\"
        with self._lock:
            uptime = time.time() - self._created_at
            return {
                "current_size": len(self._heap),
                "total_added": self._total_added,
                "total_removed": self._total_removed,
                "pending_tasks": len(self._heap),
                "throughput": self._total_removed / uptime if uptime > 0 else 0,
                "uptime_seconds": uptime
            }


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    queue = PriorityTaskQueue(max_size=100)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
    queue.put(Task("low", "Low priority task", priority=2))
    queue.put(Task("high", "High priority task", priority=9))
    queue.put(Task("medium", "Medium priority task", priority=5))
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    while not queue.is_empty():
        task = queue.get()
        print(f"Processing: {task.id} (priority: {task.priority})")
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    print("Metrics:", queue.get_metrics())
```

–ö–æ–¥ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏!
"""
            },
            
            "problem_solving": {
                "input": f"""
–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: –¢—ã AI-–∞–≥–µ–Ω—Ç –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–æ–µ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.

–ü—Ä–æ–±–ª–µ–º–∞: {task_description}

–ö–æ–Ω—Ç–µ–∫—Å—Ç: –í –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ —Ä–æ–µ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç—ã –Ω–∞—á–∞–ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ. –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–ø–∞–ª–∞ —Å 50 –∑–∞–¥–∞—á/–º–∏–Ω –¥–æ 15 –∑–∞–¥–∞—á/–º–∏–Ω. 

–°–∏–º–ø—Ç–æ–º—ã:
- –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU (95%+)
- –ü–∞–º—è—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ (60%)
- –û—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á –ø–µ—Ä–µ–ø–æ–ª–Ω—è—é—Ç—Å—è
- –ê–≥–µ–Ω—Ç—ã —á–∞—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥—è—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ WAITING
- –õ–æ–≥–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –º–Ω–æ–≥–æ —Ç–∞–π–º–∞—É—Ç–æ–≤

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
- 10 –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Ä–æ–µ
- Async/await –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
- –®–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ asyncio.Queue
- TaskDistributor —Å LOAD_BALANCED —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π

–ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø—Ä–∏—á–∏–Ω—É –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ.
""",
                "output": """
# –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

## üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞

### –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞
–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU (95%+) –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ **–ø—Ä–æ–±–ª–µ–º—É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ –∑–∞ —Ä–µ—Å—É—Ä—Å—ã** –∏ –≤–æ–∑–º–æ–∂–Ω—É—é **–∞–∫—Ç–∏–≤–Ω—É—é –æ–∂–∏–¥–∞–Ω–∏–µ (busy waiting)**.

### –í–µ—Ä–æ—è—Ç–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã

1. **Busy waiting –≤ —Ü–∏–∫–ª–∞—Ö –æ–ø—Ä–æ—Å–∞**
   ```python
   # –ü–ª–æ—Ö–æ: –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
   while not queue.empty():
       pass  # –ñ–∂–µ—Ç CPU
   
   # –•–æ—Ä–æ—à–æ: async –æ–∂–∏–¥–∞–Ω–∏–µ
   await asyncio.sleep(0.1)
   ```

2. **–ë–ª–æ–∫–∏—Ä—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ async –∫–æ–¥–µ**
   ```python
   # –ë–ª–æ–∫–∏—Ä—É–µ—Ç event loop
   time.sleep(1)  # ‚ùå
   
   # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç
   await asyncio.sleep(1)  # ‚úÖ
   ```

3. **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –æ—á–µ—Ä–µ–¥—è–º–∏**
   ```python
   # –ú–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —Ç–∞–π–º–∞—É—Ç—ã
   message = await queue.get()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
   
   # –õ—É—á—à–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
   message = await asyncio.wait_for(queue.get(), timeout=1.0)
   ```

## üõ†Ô∏è –ü–ª–∞–Ω —Ä–µ—à–µ–Ω–∏—è

### –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (0-1 —á–∞—Å)

1. **–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ**
   ```python
   import cProfile
   import asyncio
   
   async def profile_swarm():
       profiler = cProfile.Profile()
       profiler.enable()
       
       # –ö–æ–¥ —Ä–æ—è
       await swarm.run_for_time(60)  # 1 –º–∏–Ω—É—Ç–∞
       
       profiler.disable()
       profiler.dump_stats('swarm_profile.prof')
   ```

2. **–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ü–∏–∫–ª—ã –æ–ø—Ä–æ—Å–∞**
   ```python
   # –í TaskDistributor._task_distribution_loop()
   async def _task_distribution_loop(self):
       while self.running:
           assignments = await self.distribute_tasks()
           
           if not assignments:
               await asyncio.sleep(0.1)  # ‚≠ê –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É
           
           for assignment in assignments:
               await self._execute_assignment(assignment)
   ```

3. **–î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥**
   ```python
   import psutil
   import time
   
   async def monitor_performance():
       while True:
           cpu_percent = psutil.cpu_percent()
           memory_percent = psutil.virtual_memory().percent
           
           if cpu_percent > 90:
               logger.warning(f"High CPU: {cpu_percent}%")
           
           await asyncio.sleep(5)
   ```

### –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è (1-24 —á–∞—Å–∞)

4. **–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π**
   ```python
   async def _message_processing_loop(self):
       while self.running:
           processed_any = False
           
           for agent_id in self.agents:
               message = await self.message_bus.receive_message(
                   agent_id, timeout=0.01  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç
               )
               if message:
                   await self._process_agent_message(agent_id, message)
                   processed_any = True
           
           if not processed_any:
               await asyncio.sleep(0.05)  # –ò–∑–±–µ–≥–∞–µ–º busy waiting
   ```

5. **–ü—É–ª—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö API**
   ```python
   import aiohttp
   
   # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é
   class OptimizedAIAgent:
       def __init__(self):
           self.session = aiohttp.ClientSession(
               connector=aiohttp.TCPConnector(limit=10)
           )
   ```

6. **–ë–∞—Ç—á–∏–Ω–≥ –æ–ø–µ—Ä–∞—Ü–∏–π**
   ```python
   async def process_messages_batch(self, agent_id: str):
       messages = []
       
       # –°–æ–±–∏—Ä–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
       for _ in range(10):
           msg = await self.message_bus.receive_message(
               agent_id, timeout=0.01
           )
           if msg:
               messages.append(msg)
           else:
               break
       
       # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–µ–º
       if messages:
           await self.process_message_batch(messages)
   ```

### –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (1-7 –¥–Ω–µ–π)

7. **–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è**
   ```python
   class AdaptiveDistributor:
       def __init__(self):
           self.cpu_threshold = 80
           self.adaptive_delay = 0.1
       
       async def distribute_with_backpressure(self):
           cpu_usage = psutil.cpu_percent()
           
           if cpu_usage > self.cpu_threshold:
               # –ó–∞–º–µ–¥–ª—è–µ–º –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ
               self.adaptive_delay = min(self.adaptive_delay * 1.2, 1.0)
           else:
               # –£—Å–∫–æ—Ä—è–µ–º –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ
               self.adaptive_delay = max(self.adaptive_delay * 0.9, 0.01)
           
           await asyncio.sleep(self.adaptive_delay)
   ```

8. **–ú–µ—Ç—Ä–∏–∫–∏ –∏ –∞–ª–µ—Ä—Ç—ã**
   ```python
   class PerformanceMonitor:
       def __init__(self):
           self.metrics = {
               'tasks_per_minute': 0,
               'avg_response_time': 0,
               'cpu_usage': 0,
               'queue_sizes': {}
           }
       
       async def check_performance_degradation(self):
           if self.metrics['tasks_per_minute'] < 30:  # –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
               await self.send_alert("Performance degradation detected")
   ```

## üìä –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

- **CPU —Å–Ω–∏–∑–∏—Ç—Å—è —Å 95% –¥–æ 70-80%**
- **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã—Ä–∞—Å—Ç–µ—Ç —Å 15 –¥–æ 40+ –∑–∞–¥–∞—á/–º–∏–Ω**
- **–¢–∞–π–º–∞—É—Ç—ã —Å–æ–∫—Ä–∞—Ç—è—Ç—Å—è –Ω–∞ 90%**
- **Latency —É–º–µ–Ω—å—à–∏—Ç—Å—è –≤ 2-3 —Ä–∞–∑–∞**

## üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

```bash
# –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ Python
python -m cProfile -o profile.stats your_script.py

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
htop
iotop
nethogs

# Async –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
pip install aiomonitor
```

## ‚úÖ –ß–µ–∫-–ª–∏—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏

- [ ] –£–±—Ä–∞—Ç—å –≤—Å–µ `time.sleep()` –∏–∑ async –∫–æ–¥–∞
- [ ] –î–æ–±–∞–≤–∏—Ç—å `await asyncio.sleep()` –≤ —Ü–∏–∫–ª—ã
- [ ] –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–π–º–∞—É—Ç—ã –≤ –æ—á–µ—Ä–µ–¥—è—Ö
- [ ] –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞—Ç—á–∏–Ω–≥ –æ–ø–µ—Ä–∞—Ü–∏–π
- [ ] –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- [ ] –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π

–†–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∞—Ç—å —Å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è - —ç—Ç–æ –ø–æ–∫–∞–∂–µ—Ç —Ç–æ—á–Ω—ã–µ —É–∑–∫–∏–µ –º–µ—Å—Ç–∞!
"""
            }
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
        task_type = "code_analysis"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è" in task_description.lower() or "—Å–æ–∑–¥–∞—Ç—å" in task_description.lower():
            task_type = "code_generation"
        elif "–ø—Ä–æ–±–ª–µ–º–∞" in task_description.lower() or "–æ—à–∏–±–∫–∞" in task_description.lower():
            task_type = "problem_solving"
            
        scenario = task_scenarios.get(task_type, task_scenarios["code_analysis"])
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
        results = {}
        total_cost = 0
        
        for model in models_used:
            cost_info = self.calculate_single_call_cost(
                model, 
                scenario["input"], 
                scenario["output"]
            )
            results[model] = cost_info
            
            if "total_cost_usd" in cost_info:
                if parallel_execution:
                    # –ü—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—Å–µ –º–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
                    total_cost += cost_info["total_cost_usd"]
                else:
                    # –ü—Ä–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º - –±–µ—Ä–µ–º —Å–∞–º—É—é –¥–æ—Ä–æ–≥—É—é (worst case)
                    total_cost = max(total_cost, cost_info["total_cost_usd"])
        
        return {
            "task_type": task_type,
            "task_description": task_description,
            "models_used": models_used,
            "execution_mode": "parallel" if parallel_execution else "sequential",
            "individual_costs": results,
            "total_cost_usd": round(total_cost, 6),
            "total_cost_rub": round(total_cost * 95, 4),
            "cost_breakdown": self._get_cost_breakdown(results, parallel_execution)
        }
        
    def _get_cost_breakdown(self, results: Dict, parallel: bool) -> Dict:
        """–î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
        
        breakdown = {
            "cheapest_option": None,
            "most_expensive": None,
            "cost_savings": 0,
            "recommendations": []
        }
        
        valid_results = {k: v for k, v in results.items() if "total_cost_usd" in v}
        
        if not valid_results:
            return breakdown
            
        # –ù–∞–π—Ç–∏ —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –∏ –¥–æ—Ä–æ–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç—ã
        cheapest = min(valid_results.items(), key=lambda x: x[1]["total_cost_usd"])
        expensive = max(valid_results.items(), key=lambda x: x[1]["total_cost_usd"])
        
        breakdown["cheapest_option"] = {
            "model": cheapest[0],
            "cost_usd": cheapest[1]["total_cost_usd"]
        }
        breakdown["most_expensive"] = {
            "model": expensive[0], 
            "cost_usd": expensive[1]["total_cost_usd"]
        }
        
        # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è
        if len(valid_results) > 1:
            breakdown["cost_savings"] = expensive[1]["total_cost_usd"] - cheapest[1]["total_cost_usd"]
            
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if not parallel:
            breakdown["recommendations"].append(
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {cheapest[0]} –≤–º–µ—Å—Ç–æ {expensive[0]} –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ ${breakdown['cost_savings']:.4f} –∑–∞ –≤—ã–∑–æ–≤"
            )
            
        if any("local" in model for model in valid_results.keys()):
            breakdown["recommendations"].append(
                "–õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã, –Ω–æ —Ç—Ä–µ–±—É—é—Ç –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"
            )
            
        return breakdown
        
    def monthly_cost_estimate(
        self,
        daily_calls: int,
        models_config: Dict[str, float]  # model -> –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    ) -> Dict[str, float]:
        """–û—Ü–µ–Ω–∫–∞ –º–µ—Å—è—á–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç"""
        
        # –¢–∏–ø–∏—á–Ω—ã–π –≤—ã–∑–æ–≤ (—Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä)
        avg_input = "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç + –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ + –∫–æ–¥ (500 —Å—Ç—Ä–æ–∫)"
        avg_output = "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–¥–∞ (200 —Å—Ç—Ä–æ–∫)"
        
        daily_cost = 0
        breakdown = {}
        
        for model, usage_percent in models_config.items():
            if model in self.prices:
                calls_per_model = int(daily_calls * usage_percent)
                cost_per_call = self.calculate_single_call_cost(model, avg_input, avg_output)
                
                if "total_cost_usd" in cost_per_call:
                    model_daily_cost = calls_per_model * cost_per_call["total_cost_usd"]
                    daily_cost += model_daily_cost
                    breakdown[model] = {
                        "daily_calls": calls_per_model,
                        "cost_per_call": cost_per_call["total_cost_usd"],
                        "daily_cost": model_daily_cost,
                        "monthly_cost": model_daily_cost * 30
                    }
        
        return {
            "daily_cost_usd": round(daily_cost, 4),
            "monthly_cost_usd": round(daily_cost * 30, 2),
            "monthly_cost_rub": round(daily_cost * 30 * 95, 2),
            "breakdown": breakdown
        }


def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    
    calc = CostCalculator()
    
    print("üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ AI-–∞–≥–µ–Ω—Ç–æ–≤ –≤ —Ä–æ–µ–≤–æ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏")
    print("=" * 70)
    
    # 1. –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –≤—ã–∑–æ–≤–∞
    print("\nüìû –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ (–∞–Ω–∞–ª–∏–∑ –Ω–µ–±–æ–ª—å—à–æ–π —Ñ—É–Ω–∫—Ü–∏–∏):")
    print("-" * 50)
    
    simple_input = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é: def hello(): return 'Hello, World!'"
    simple_output = "–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å—Ç–∞—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –¥–æ–±–∞–≤–∏—Ç—å docstring –∏ type hints."
    
    for model in ["gpt-3.5-turbo", "gpt-4", "claude-3-sonnet", "local-llm"]:
        cost = calc.calculate_single_call_cost(model, simple_input, simple_output)
        if "total_cost_usd" in cost:
            print(f"{cost['model']:20} ${cost['total_cost_usd']:8.6f} (‚ÇΩ{cost['total_cost_rub']:7.4f})")
    
    # 2. –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –∑–∞–¥–∞—á–∏ –≤ —Ä–æ–µ
    print(f"\nüîç –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ –≤ —Ä–æ–µ:")
    print("-" * 50)
    
    # –û–¥–∏–Ω –∞–≥–µ–Ω—Ç
    single_agent_cost = calc.calculate_swarm_task_cost(
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –º–æ–¥—É–ª—è —Å 5 —Ñ—É–Ω–∫—Ü–∏—è–º–∏",
        ["gpt-4"],
        parallel_execution=False
    )
    
    print(f"–û–¥–∏–Ω GPT-4 –∞–≥–µ–Ω—Ç:        ${single_agent_cost['total_cost_usd']:.6f}")
    
    # –ú—É–ª—å—Ç–∏-–∞–≥–µ–Ω—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    multi_parallel_cost = calc.calculate_swarm_task_cost(
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –º–æ–¥—É–ª—è —Å 5 —Ñ—É–Ω–∫—Ü–∏—è–º–∏", 
        ["gpt-4", "claude-3-sonnet", "gpt-3.5-turbo"],
        parallel_execution=True
    )
    
    print(f"3 –∞–≥–µ–Ω—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ:    ${multi_parallel_cost['total_cost_usd']:.6f}")
    
    # –ú—É–ª—å—Ç–∏-–∞–≥–µ–Ω—Ç —Å fallback
    multi_fallback_cost = calc.calculate_swarm_task_cost(
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –º–æ–¥—É–ª—è —Å 5 —Ñ—É–Ω–∫—Ü–∏—è–º–∏",
        ["gpt-4", "claude-3-sonnet", "local-llm"], 
        parallel_execution=False
    )
    
    print(f"3 –∞–≥–µ–Ω—Ç–∞ —Å fallback:     ${multi_fallback_cost['total_cost_usd']:.6f}")
    
    # –¢–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏
    local_only_cost = calc.calculate_swarm_task_cost(
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –º–æ–¥—É–ª—è —Å 5 —Ñ—É–Ω–∫—Ü–∏—è–º–∏",
        ["local-llm"],
        parallel_execution=False
    )
    
    print(f"–¢–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏: ${local_only_cost['total_cost_usd']:.6f}")
    
    # 3. –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    print(f"\nüìä –ú–µ—Å—è—á–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã (1000 –≤—ã–∑–æ–≤–æ–≤/–¥–µ–Ω—å):")
    print("-" * 50)
    
    scenarios = [
        {
            "name": "–¢–æ–ª—å–∫–æ GPT-3.5",
            "config": {"gpt-3.5-turbo": 1.0}
        },
        {
            "name": "Mix: GPT-4 + GPT-3.5",
            "config": {"gpt-4": 0.3, "gpt-3.5-turbo": 0.7}
        },
        {
            "name": "Premium: GPT-4 + Claude",
            "config": {"gpt-4": 0.5, "claude-3-sonnet": 0.5}
        },
        {
            "name": "–≠–∫–æ–Ω–æ–º–Ω—ã–π: GPT-3.5 + Local",
            "config": {"gpt-3.5-turbo": 0.6, "local-llm": 0.4}
        }
    ]
    
    for scenario in scenarios:
        monthly = calc.monthly_cost_estimate(1000, scenario["config"])
        print(f"{scenario['name']:25} ${monthly['monthly_cost_usd']:8.2f}/–º–µ—Å (‚ÇΩ{monthly['monthly_cost_rub']:10.2f})")
    
    # 4. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("-" * 50)
    
    print("üî∏ –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: GPT-3.5-turbo (~$0.01 –∑–∞ –≤—ã–∑–æ–≤)")
    print("üî∏ –î–ª—è production: Mix GPT-4 + Claude (~$0.15 –∑–∞ –≤—ã–∑–æ–≤)")
    print("üî∏ –î–ª—è –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏: –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä)")
    print("üî∏ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: 70% GPT-3.5 + 30% GPT-4 (~$0.05 –∑–∞ –≤—ã–∑–æ–≤)")
    
    print(f"\nüìà –≠–∫–æ–Ω–æ–º–∏—è —Å —Ä–æ—Å—Ç–æ–º –æ–±—ä–µ–º–∞:")
    print("-" * 30)
    volumes = [100, 1000, 10000, 100000]
    for volume in volumes:
        monthly = calc.monthly_cost_estimate(volume, {"gpt-3.5-turbo": 1.0})
        cost_per_call = monthly['monthly_cost_usd'] / (volume * 30)
        print(f"{volume:6} –≤—ã–∑–æ–≤–æ–≤/–¥–µ–Ω—å: ${cost_per_call:.6f} –∑–∞ –≤—ã–∑–æ–≤")


if __name__ == "__main__":
    main()
