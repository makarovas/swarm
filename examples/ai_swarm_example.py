"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI-–∞–≥–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–æ–µ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio
import logging
import os
from swarm import SwarmManager, Task
from swarm.agents import OpenAIAgent, AnthropicAgent, LocalLLMAgent, MultiAIAgent, MultiAIConfig


async def demonstrate_ai_agents():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö AI-–∞–≥–µ–Ω—Ç–æ–≤"""
    
    print("ü§ñ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AI-–∞–≥–µ–Ω—Ç–æ–≤ –≤ —Ä–æ–µ–≤–æ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏\n")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–æ—è
    swarm = SwarmManager()
    await swarm.start()
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö AI-–∞–≥–µ–Ω—Ç–æ–≤
        ai_agents = []
        
        # 1. OpenAI –∞–≥–µ–Ω—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á)
        openai_key = os.getenv("OPENAI_API_KEY")
        if openai_key:
            openai_agent = OpenAIAgent(
                api_key=openai_key,
                model_name="gpt-3.5-turbo",
                name="GPT-–ê–Ω–∞–ª–∏—Ç–∏–∫",
                system_prompt="–¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫–æ–¥–∞ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –ü–û."
            )
            await swarm.add_agent(openai_agent)
            ai_agents.append(("OpenAI GPT", openai_agent))
            print("‚úÖ OpenAI –∞–≥–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–æ–π")
        else:
            print("‚ö†Ô∏è  OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENAI_API_KEY)")
            
        # 2. Anthropic –∞–≥–µ–Ω—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á)
        anthropic_key = os.getenv("ANTHROPIC_API_KEY")
        if anthropic_key:
            anthropic_agent = AnthropicAgent(
                api_key=anthropic_key,
                model_name="claude-3-sonnet-20240229",
                name="Claude-–†–µ–≤—å—é–≤–µ—Ä",
                system_prompt="–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞ –∏ —ç—Ç–∏—á–Ω–æ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é."
            )
            await swarm.add_agent(anthropic_agent)
            ai_agents.append(("Anthropic Claude", anthropic_agent))
            print("‚úÖ Anthropic –∞–≥–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–æ–π")
        else:
            print("‚ö†Ô∏è  Anthropic API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ANTHROPIC_API_KEY)")
            
        # 3. –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω)
        local_agent = LocalLLMAgent(
            model_name="llama2",
            base_url="http://localhost:11434",  # Ollama –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            name="Local-LLM",
            system_prompt="–¢—ã –ª–æ–∫–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞."
        )
        await swarm.add_agent(local_agent)
        ai_agents.append(("Local LLM", local_agent))
        print("‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–æ–π")
        
        # 4. –ú—É–ª—å—Ç–∏-AI –∞–≥–µ–Ω—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π)
        if len(ai_agents) > 1:
            multi_config = MultiAIConfig(
                primary_model="openai" if openai_key else "local",
                fallback_models=["anthropic", "local"] if anthropic_key else ["local"],
                use_voting=True,
                parallel_processing=True
            )
            
            multi_agent = MultiAIAgent(
                multi_config=multi_config,
                openai_config={"api_key": openai_key} if openai_key else None,
                anthropic_config={"api_key": anthropic_key} if anthropic_key else None,
                local_config={"model_name": "llama2"},
                name="Multi-AI-–ö–æ–Ω—Å–µ–Ω—Å—É—Å"
            )
            await swarm.add_agent(multi_agent)
            ai_agents.append(("Multi-AI", multi_agent))
            print("‚úÖ –ú—É–ª—å—Ç–∏-AI –∞–≥–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–æ–π")
            
        print(f"\nüéØ –°–æ–∑–¥–∞–Ω–æ {len(ai_agents)} AI-–∞–≥–µ–Ω—Ç–æ–≤\n")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è AI-–∞–≥–µ–Ω—Ç–æ–≤
        test_tasks = [
            {
                "name": "–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞",
                "task": Task(
                    id="code_analysis_test",
                    content={
                        "code": '''
def calculate_factorial(n):
    if n < 0:
        return None
    elif n == 0:
        return 1
    else:
        result = 1
        for i in range(1, n + 1):
            result *= i
        return result

def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n-1) + fibonacci(n-2)
''',
                        "description": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞"
                    },
                    requirements=["code_analysis", "ai_processing"]
                )
            },
            {
                "name": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞",
                "task": Task(
                    id="code_generation_test",
                    content={
                        "specification": "–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—á–µ—Ä–µ–¥—å—é –∑–∞–¥–∞—á —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏",
                        "language": "python",
                        "description": "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∏—Å—Ç—ã–π, –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥"
                    },
                    requirements=["code_generation", "ai_processing"]
                )
            },
            {
                "name": "–û—Ç–ª–∞–¥–∫–∞ –∫–æ–¥–∞",
                "task": Task(
                    id="debugging_test",
                    content={
                        "code": '''
def divide_numbers(a, b):
    return a / b

def process_list(numbers):
    results = []
    for num in numbers:
        result = divide_numbers(num, 0)
        results.append(result)
    return results
''',
                        "error": "ZeroDivisionError –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏",
                        "description": "–ù–∞–π—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ –∫–æ–¥–µ"
                    },
                    requirements=["code_analysis", "problem_solving", "ai_processing"]
                )
            }
        ]
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
        for task_info in test_tasks:
            print(f"üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: {task_info['name']}")
            print("-" * 50)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ —Ä–æ–µ
            result = await swarm.execute_task(task_info["task"])
            
            if result.success:
                print(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≥–µ–Ω—Ç–æ–º: {result.agent_id}")
                print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.execution_time:.2f}—Å")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if isinstance(result.result, dict):
                    ai_response = result.result.get("ai_response", "")
                    model_used = result.result.get("model_used", "unknown")
                    confidence = result.result.get("confidence", 0)
                    
                    print(f"ü§ñ –ú–æ–¥–µ–ª—å: {model_used}")
                    print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%}")
                    print(f"üí¨ –û—Ç–≤–µ—Ç:\n{ai_response[:300]}...")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –º—É–ª—å—Ç–∏-AI
                    if "consensus_achieved" in result.result:
                        consensus = result.result["consensus_achieved"]
                        models = result.result.get("participating_models", [])
                        print(f"üéØ –ö–æ–Ω—Å–µ–Ω—Å—É—Å: {'–î–∞' if consensus else '–ù–µ—Ç'}")
                        print(f"ü§ù –£—á–∞—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–µ–ª–∏: {', '.join(models)}")
                        
                else:
                    print(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.result}")
                    
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result.error_message}")
                
            print("\n" + "="*60 + "\n")
            
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI-–∞–≥–µ–Ω—Ç–æ–≤
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI-–∞–≥–µ–Ω—Ç–æ–≤:")
        print("-" * 30)
        
        agent_list = swarm.get_agent_list()
        for agent_info in agent_list:
            if "AI" in agent_info["name"] or "GPT" in agent_info["name"] or "Claude" in agent_info["name"]:
                metrics = agent_info["metrics"]
                print(f"ü§ñ {agent_info['name']}:")
                print(f"   –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {metrics['total_tasks']}")
                print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {metrics['success_rate']:.1%}")
                print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {metrics['average_execution_time']:.1f}—Å")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ AI –º–µ—Ç—Ä–∏–∫–∏
                if hasattr(swarm.agents.get(agent_info['id']), 'get_ai_metrics'):
                    ai_metrics = swarm.agents[agent_info['id']].get_ai_metrics()
                    if "total_tokens_used" in ai_metrics:
                        print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {ai_metrics['total_tokens_used']}")
                    if "cost_estimate" in ai_metrics:
                        print(f"   –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${ai_metrics['cost_estimate']:.4f}")
                        
                print()
                
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤:\n")
        
        for agent_name, agent in ai_agents:
            if hasattr(agent, 'analyze_code_quality'):
                print(f"üîç {agent_name} - –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞:")
                try:
                    quality_result = await agent.analyze_code_quality('''
def hello_world():
    print("Hello, World!")
    return True
''')
                    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {quality_result.get('ai_response', 'N/A')[:100]}...")
                except Exception as e:
                    print(f"   –û—à–∏–±–∫–∞: {e}")
                print()
                
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        print("üè† –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:")
        if hasattr(local_agent, 'check_model_availability'):
            availability = await local_agent.check_model_availability()
            status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞" if availability["available"] else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            print(f"   Ollama: {status}")
            if not availability["available"]:
                print(f"   –ü—Ä–∏—á–∏–Ω–∞: {availability.get('error', 'N/A')}")
                
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ—è...")
        await swarm.stop()
        print("‚úÖ –†–æ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.WARNING,  # –£–º–µ–Ω—å—à–∞–µ–º —à—É–º –≤ –ª–æ–≥–∞—Ö
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    print("üöÄ –°–∏—Å—Ç–µ–º–∞ AI-–∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–æ–µ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 60)
    print()
    print("üí° –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("   export OPENAI_API_KEY='your-openai-key'")
    print("   export ANTHROPIC_API_KEY='your-anthropic-key'")
    print("   –ò –∑–∞–ø—É—Å—Ç–∏—Ç–µ Ollama –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
    print()
    
    try:
        await demonstrate_ai_agents()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
