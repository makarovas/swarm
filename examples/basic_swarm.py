"""
–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–æ–µ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio
import logging
from swarm import SwarmManager, Agent
from swarm.core.agent import Task


class CodeAnalysisAgent(Agent):
    """–ê–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞"""
    
    def __init__(self, agent_id=None, name=None):
        super().__init__(
            agent_id=agent_id,
            name=name,
            capabilities=["code_analysis", "syntax_check"],
            max_concurrent_tasks=2
        )
        
    async def _execute_task_impl(self, task: Task):
        """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞"""
        
        if "code_analysis" in task.requirements:
            # –°–∏–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞
            code = task.content.get("code", "")
            
            await asyncio.sleep(1)  # –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑
            analysis = {
                "lines_count": len(code.split('\n')),
                "has_functions": "def " in code,
                "has_classes": "class " in code,
                "complexity": "low" if len(code) < 100 else "medium" if len(code) < 500 else "high"
            }
            
            return analysis
            
        elif "syntax_check" in task.requirements:
            # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            code = task.content.get("code", "")
            
            await asyncio.sleep(0.5)
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            try:
                compile(code, '<string>', 'exec')
                return {"syntax_valid": True, "errors": []}
            except SyntaxError as e:
                return {"syntax_valid": False, "errors": [str(e)]}
                
        else:
            raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏")


class TestingAgent(Agent):
    """–ê–≥–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, agent_id=None, name=None):
        super().__init__(
            agent_id=agent_id,
            name=name,
            capabilities=["unit_testing", "integration_testing"],
            max_concurrent_tasks=1
        )
        
    async def _execute_task_impl(self, task: Task):
        """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        if "unit_testing" in task.requirements:
            # –°–∏–º—É–ª—è—Ü–∏—è —é–Ω–∏—Ç-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            code = task.content.get("code", "")
            
            await asyncio.sleep(2)  # –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
            # –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            test_results = {
                "tests_run": 5,
                "tests_passed": 4,
                "tests_failed": 1,
                "coverage": 85.0,
                "failures": ["test_edge_case: AssertionError"]
            }
            
            return test_results
            
        elif "integration_testing" in task.requirements:
            # –°–∏–º—É–ª—è—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await asyncio.sleep(3)
            
            return {
                "integration_tests": 3,
                "passed": 3,
                "failed": 0,
                "response_time_avg": 150  # –º—Å
            }
            
        else:
            raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏")


class DocumentationAgent(Agent):
    """–ê–≥–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    
    def __init__(self, agent_id=None, name=None):
        super().__init__(
            agent_id=agent_id,
            name=name,
            capabilities=["doc_generation", "api_docs"],
            max_concurrent_tasks=1
        )
        
    async def _execute_task_impl(self, task: Task):
        """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        
        if "doc_generation" in task.requirements:
            # –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            code = task.content.get("code", "")
            
            await asyncio.sleep(1.5)
            
            # –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            functions = code.count("def ")
            classes = code.count("class ")
            
            documentation = {
                "summary": f"–ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç {functions} —Ñ—É–Ω–∫—Ü–∏–π –∏ {classes} –∫–ª–∞—Å—Å–æ–≤",
                "functions_documented": functions,
                "classes_documented": classes,
                "doc_format": "markdown",
                "completeness": 90.0
            }
            
            return documentation
            
        else:
            raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–æ—è
    swarm = SwarmManager()
    
    try:
        # –ó–∞–ø—É—Å–∫ —Ä–æ—è
        print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Ä–æ–µ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è...")
        await swarm.start()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤
        print("üë• –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤...")
        agents = [
            CodeAnalysisAgent(name="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä-1"),
            CodeAnalysisAgent(name="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä-2"),
            TestingAgent(name="–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫-1"),
            DocumentationAgent(name="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ç–æ—Ä-1")
        ]
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Ä–æ–π
        for agent in agents:
            await swarm.add_agent(agent)
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∞–≥–µ–Ω—Ç: {agent.name}")
            
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        sample_code = '''
def calculate_factorial(n):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞"""
    if n < 0:
        raise ValueError("–§–∞–∫—Ç–æ—Ä–∏–∞–ª –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
    if n == 0 or n == 1:
        return 1
    return n * calculate_factorial(n - 1)

class Calculator:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"""
    
    def add(self, a, b):
        return a + b
        
    def multiply(self, a, b):
        return a * b
'''
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á
        print("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á...")
        
        tasks = [
            Task(
                id="analysis_1",
                content={"code": sample_code},
                requirements=["code_analysis"],
                priority=3
            ),
            Task(
                id="syntax_check_1",
                content={"code": sample_code},
                requirements=["syntax_check"],
                priority=2
            ),
            Task(
                id="testing_1",
                content={"code": sample_code},
                requirements=["unit_testing"],
                priority=2
            ),
            Task(
                id="documentation_1",
                content={"code": sample_code},
                requirements=["doc_generation"],
                priority=1
            )
        ]
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
        print("‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á...")
        results = await swarm.execute_tasks_batch(tasks)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        for result in results:
            status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if result.success else "‚ùå –û—à–∏–±–∫–∞"
            print(f"{status} - –ó–∞–¥–∞—á–∞ {result.task_id} (–ê–≥–µ–Ω—Ç: {result.agent_id})")
            print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.execution_time:.2f}—Å")
            
            if result.success and result.result:
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.result}")
            elif not result.success:
                print(f"   –û—à–∏–±–∫–∞: {result.error_message}")
            print()
            
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ—è
        print("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ—è:")
        swarm_status = swarm.get_swarm_status()
        print(f"   –ê–≥–µ–Ω—Ç–æ–≤ –≤ —Ä–æ–µ: {swarm_status['agents_count']}")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á: {swarm_status['total_tasks_processed']}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–¥–∞—á: {swarm_status['successful_tasks']}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {swarm_status['success_rate']:.1%}")
        print(f"   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {swarm_status['uptime']:.1f}—Å")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≥–µ–Ω—Ç–∞—Ö
        print("\nü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≥–µ–Ω—Ç–∞—Ö:")
        agents_info = swarm.get_agent_list()
        for agent_info in agents_info:
            print(f"   {agent_info['name']} ({agent_info['id'][:8]}...)")
            print(f"     –°–æ—Å—Ç–æ—è–Ω–∏–µ: {agent_info['state']}")
            print(f"     –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: {', '.join(agent_info['capabilities'])}")
            print(f"     –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {agent_info['current_tasks']}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
    finally:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ—è
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ—è...")
        await swarm.stop()
        print("‚úÖ –†–æ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    asyncio.run(main())
