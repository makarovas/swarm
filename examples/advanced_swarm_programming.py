"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–∏–º–µ—Ä —Ä–æ–µ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:
–°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –º–æ–¥—É–ª—è
"""

import asyncio
import logging
import random
from typing import Dict, Any
from swarm import SwarmManager, Agent
from swarm.core.agent import Task
from swarm.core.swarm_manager import SwarmConfig
from swarm.tasks.task_distributor import DistributionStrategy


class ArchitectAgent(Agent):
    """–ê–≥–µ–Ω—Ç-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä, –ø—Ä–æ–µ–∫—Ç–∏—Ä—É—é—â–∏–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, agent_id=None, name=None):
        super().__init__(
            agent_id=agent_id,
            name=name,
            capabilities=["system_design", "architecture_review"],
            max_concurrent_tasks=1
        )
        
    async def _execute_task_impl(self, task: Task):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –∑–∞–¥–∞—á"""
        
        if "system_design" in task.requirements:
            requirements = task.content.get("requirements", "")
            
            # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
            await asyncio.sleep(random.uniform(2, 4))
            
            architecture = {
                "components": [
                    "UserInterface",
                    "BusinessLogic", 
                    "DataAccess",
                    "ExternalAPI"
                ],
                "patterns": ["MVC", "Repository", "Factory"],
                "technologies": ["Python", "FastAPI", "SQLAlchemy", "PostgreSQL"],
                "estimated_complexity": random.choice(["low", "medium", "high"]),
                "development_time_weeks": random.randint(2, 8)
            }
            
            return architecture
            
        elif "architecture_review" in task.requirements:
            code_structure = task.content.get("code_structure", {})
            
            await asyncio.sleep(random.uniform(1, 2))
            
            review = {
                "score": random.uniform(0.7, 0.95),
                "issues": random.choice([
                    [],
                    ["–°–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–∞—è —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"],
                    ["–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏"],
                    ["–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"]
                ]),
                "recommendations": [
                    "–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –ª—É—á—à–µ–π —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏",
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å dependency injection",
                    "–†–∞–∑–¥–µ–ª–∏—Ç—å –±–æ–ª—å—à–∏–µ –∫–ª–∞—Å—Å—ã –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ"
                ]
            }
            
            return review


class DeveloperAgent(Agent):
    """–ê–≥–µ–Ω—Ç-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –∫–æ–¥"""
    
    def __init__(self, agent_id=None, name=None, specialization="backend"):
        super().__init__(
            agent_id=agent_id,
            name=name,
            capabilities=["code_implementation", "refactoring"],
            max_concurrent_tasks=2
        )
        self.specialization = specialization
        
    async def _execute_task_impl(self, task: Task):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        
        if "code_implementation" in task.requirements:
            component = task.content.get("component", "")
            spec = task.content.get("specification", {})
            
            # –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–¥–∞
            complexity = spec.get("complexity", "medium")
            base_time = {"low": 1, "medium": 3, "high": 5}[complexity]
            await asyncio.sleep(random.uniform(base_time, base_time * 2))
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if self.specialization == "backend":
                code = f'''
class {component}:
    """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ {component}"""
    
    def __init__(self, config: dict):
        self.config = config
        self.initialized = False
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        self.initialized = True
        
    async def process(self, data: dict) -> dict:
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not self.initialized:
            await self.initialize()
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        result = {{"status": "success", "data": data}}
        return result
'''
            else:  # frontend
                code = f'''
class {component}Component {{
    constructor(props) {{
        this.props = props;
        this.state = {{}};
    }}
    
    async componentDidMount() {{
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        await this.loadData();
    }}
    
    async loadData() {{
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        const data = await api.fetchData();
        this.setState({{ data }});
    }}
    
    render() {{
        return `<div>${{component}} Component</div>`;
    }}
}}
'''
            
            implementation = {
                "component": component,
                "code": code.strip(),
                "lines_of_code": len(code.strip().split('\n')),
                "complexity_score": random.uniform(0.3, 0.8),
                "test_coverage": random.uniform(0.7, 0.95),
                "specialization": self.specialization
            }
            
            return implementation
            
        elif "refactoring" in task.requirements:
            existing_code = task.content.get("code", "")
            issues = task.content.get("issues", [])
            
            await asyncio.sleep(random.uniform(1, 3))
            
            refactoring = {
                "issues_addressed": len(issues),
                "improvements": [
                    "–£–ª—É—á—à–µ–Ω–∞ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∫–æ–¥–∞",
                    "–£–º–µ–Ω—å—à–µ–Ω–∞ —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å",
                    "–î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–∏–ø—ã –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏"
                ],
                "performance_gain": random.uniform(0.1, 0.3),
                "maintainability_score": random.uniform(0.8, 0.95)
            }
            
            return refactoring


class QualityAssuranceAgent(Agent):
    """–ê–≥–µ–Ω—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞"""
    
    def __init__(self, agent_id=None, name=None):
        super().__init__(
            agent_id=agent_id,
            name=name,
            capabilities=["code_review", "testing", "quality_analysis"],
            max_concurrent_tasks=3
        )
        
    async def _execute_task_impl(self, task: Task):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞"""
        
        if "code_review" in task.requirements:
            code = task.content.get("code", "")
            
            await asyncio.sleep(random.uniform(1, 2))
            
            # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
            issues = []
            if random.random() < 0.3:  # 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã
                issues = random.sample([
                    "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç docstrings",
                    "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã",
                    "–ù–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è type hints",
                    "–ú–∞–≥–∏—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∞ –≤ –∫–æ–¥–µ",
                    "–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞"
                ], random.randint(1, 3))
                
            review = {
                "overall_score": random.uniform(0.6, 0.95),
                "issues": issues,
                "suggestions": [
                    "–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∫ –º–µ—Ç–æ–¥–∞–º",
                    "–†–∞–∑–±–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–∞ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ",
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤–º–µ—Å—Ç–æ –º–∞–≥–∏—á–µ—Å–∫–∏—Ö —á–∏—Å–µ–ª"
                ],
                "approved": len(issues) == 0
            }
            
            return review
            
        elif "testing" in task.requirements:
            component = task.content.get("component", "")
            code = task.content.get("code", "")
            
            await asyncio.sleep(random.uniform(2, 4))
            
            # –°–∏–º—É–ª—è—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_results = {
                "unit_tests": {
                    "total": random.randint(5, 15),
                    "passed": random.randint(4, 15),
                    "failed": random.randint(0, 2)
                },
                "integration_tests": {
                    "total": random.randint(2, 8),
                    "passed": random.randint(2, 8),
                    "failed": random.randint(0, 1)
                },
                "coverage": random.uniform(0.75, 0.98),
                "performance_tests": {
                    "avg_response_time_ms": random.randint(50, 300),
                    "memory_usage_mb": random.randint(10, 100)
                }
            }
            
            return test_results


async def collaborative_development_scenario():
    """–°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    
    print("üèóÔ∏è  –°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –º–æ–¥—É–ª—è\n")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–æ—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    config = SwarmConfig(
        max_agents=8,
        task_distribution_strategy=DistributionStrategy.CAPABILITY_BASED,
        auto_scale=True,
        min_agents=3,
        task_timeout=60.0
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–æ—è
    swarm = SwarmManager(config)
    
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ä–æ—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
        await swarm.start()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        development_team = [
            ArchitectAgent(name="–ì–ª–∞–≤–Ω—ã–π-–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä"),
            DeveloperAgent(name="Backend-Dev-1", specialization="backend"),
            DeveloperAgent(name="Backend-Dev-2", specialization="backend"),
            DeveloperAgent(name="Frontend-Dev-1", specialization="frontend"),
            QualityAssuranceAgent(name="QA-Lead"),
            QualityAssuranceAgent(name="QA-Tester")
        ]
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Ä–æ–π
        for agent in development_team:
            await swarm.add_agent(agent)
            print(f"üë®‚Äçüíª –î–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É: {agent.name}")
            
        print()
        
        # –≠—Ç–∞–ø 1: –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        print("üìê –≠—Ç–∞–ø 1: –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
        
        architecture_task = Task(
            id="architecture_design",
            content={
                "requirements": "–°–æ–∑–¥–∞—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ —Å API –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"
            },
            requirements=["system_design"],
            priority=5
        )
        
        arch_result = await swarm.execute_task(architecture_task)
        
        if arch_result.success:
            architecture = arch_result.result
            print(f"‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞:")
            print(f"   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {', '.join(architecture['components'])}")
            print(f"   –ü–∞—Ç—Ç–µ—Ä–Ω—ã: {', '.join(architecture['patterns'])}")
            print(f"   –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {', '.join(architecture['technologies'])}")
            print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {architecture['estimated_complexity']}")
            print(f"   –í—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: {architecture['development_time_weeks']} –Ω–µ–¥–µ–ª—å")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {arch_result.error_message}")
            return
            
        print()
        
        # –≠—Ç–∞–ø 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        print("‚ö° –≠—Ç–∞–ø 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        
        components = architecture["components"]
        development_tasks = []
        
        for i, component in enumerate(components):
            task = Task(
                id=f"implement_{component.lower()}",
                content={
                    "component": component,
                    "specification": {
                        "complexity": architecture["estimated_complexity"],
                        "patterns": architecture["patterns"]
                    }
                },
                requirements=["code_implementation"],
                priority=3
            )
            development_tasks.append(task)
            
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        dev_results = await swarm.execute_tasks_batch(development_tasks)
        
        implemented_components = {}
        for result in dev_results:
            if result.success:
                impl = result.result
                component_name = impl["component"]
                implemented_components[component_name] = impl
                print(f"‚úÖ {component_name} —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω ({impl['lines_of_code']} —Å—Ç—Ä–æ–∫, –ø–æ–∫—Ä—ã—Ç–∏–µ: {impl['test_coverage']:.1%})")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏: {result.error_message}")
                
        print()
        
        # –≠—Ç–∞–ø 3: –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞
        print("üîç –≠—Ç–∞–ø 3: –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞")
        
        qa_tasks = []
        for component_name, implementation in implemented_components.items():
            # –ö–æ–¥-—Ä–µ–≤—å—é
            review_task = Task(
                id=f"review_{component_name.lower()}",
                content={
                    "code": implementation["code"],
                    "component": component_name
                },
                requirements=["code_review"],
                priority=2
            )
            qa_tasks.append(review_task)
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            test_task = Task(
                id=f"test_{component_name.lower()}",
                content={
                    "component": component_name,
                    "code": implementation["code"]
                },
                requirements=["testing"],
                priority=2
            )
            qa_tasks.append(test_task)
            
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
        qa_results = await swarm.execute_tasks_batch(qa_tasks)
        
        reviews = {}
        test_results = {}
        
        for result in qa_results:
            if result.success:
                task_id = result.task_id
                if "review_" in task_id:
                    component = task_id.replace("review_", "").replace("_", "")
                    reviews[component] = result.result
                elif "test_" in task_id:
                    component = task_id.replace("test_", "").replace("_", "")
                    test_results[component] = result.result
                    
        # –û—Ç—á–µ—Ç –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞:")
        for component in implemented_components:
            comp_key = component.lower()
            
            if comp_key in reviews:
                review = reviews[comp_key]
                status = "‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ" if review["approved"] else "‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
                print(f"   {component}: {status} (–æ—Ü–µ–Ω–∫–∞: {review['overall_score']:.1%})")
                if review["issues"]:
                    print(f"      –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(review['issues'])}")
                    
            if comp_key in test_results:
                tests = test_results[comp_key]
                unit_passed = tests["unit_tests"]["passed"]
                unit_total = tests["unit_tests"]["total"]
                print(f"      –¢–µ—Å—Ç—ã: {unit_passed}/{unit_total} unit-—Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏, –ø–æ–∫—Ä—ã—Ç–∏–µ: {tests['coverage']:.1%}")
                
        print()
        
        # –≠—Ç–∞–ø 4: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        print("üìà –≠—Ç–∞–ø 4: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        
        swarm_status = swarm.get_swarm_status()
        agent_stats = swarm.get_agent_list()
        
        print(f"–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ—è:")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á: {swarm_status['total_tasks_processed']}")
        print(f"   –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {swarm_status['successful_tasks']}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {swarm_status['success_rate']:.1%}")
        print(f"   –í—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: {swarm_status['uptime']:.1f} —Å–µ–∫—É–Ω–¥")
        
        print(f"\n–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã:")
        for agent_info in agent_stats:
            agent_name = agent_info["name"]
            metrics = agent_info["metrics"]
            print(f"   {agent_name}:")
            print(f"     –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {metrics['total_tasks']}")
            print(f"     –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {metrics['success_rate']:.1%}")
            print(f"     –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {metrics['average_execution_time']:.1f}—Å")
            
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        total_coverage = sum(impl["test_coverage"] for impl in implemented_components.values()) / len(implemented_components)
        avg_quality_score = sum(review["overall_score"] for review in reviews.values()) / len(reviews) if reviews else 0
        
        print(f"\n–ö–∞—á–µ—Å—Ç–≤–æ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏: {total_coverage:.1%}")
        print(f"   –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞: {avg_quality_score:.1%}")
        print(f"   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ: {len(implemented_components)}/{len(components)}")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–µ–ª–∏–∑—É
        ready_for_release = (
            swarm_status['success_rate'] > 0.8 and
            total_coverage > 0.8 and
            avg_quality_score > 0.7 and
            len(implemented_components) == len(components)
        )
        
        if ready_for_release:
            print("\nüéâ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–µ–ª–∏–∑—É!")
        else:
            print("\n‚ö†Ô∏è  –ü—Ä–æ–µ–∫—Ç —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–¥ —Ä–µ–ª–∏–∑–æ–º")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Ä–æ—è...")
        await swarm.stop()
        print("‚úÖ –†–æ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.ERROR,  # –ú–∏–Ω–∏–º—É–º –ª–æ–≥–æ–≤ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –≤—ã–≤–æ–¥–∞
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    try:
        await collaborative_development_scenario()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
