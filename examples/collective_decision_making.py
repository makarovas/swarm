"""
–ü—Ä–∏–º–µ—Ä –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –≤ —Ä–æ–µ
"""

import asyncio
import logging
import random
from swarm import SwarmManager, Agent
from swarm.core.agent import Task
from swarm.intelligence.collective_intelligence import CollectiveIntelligence, VotingMethod


class DecisionMakingAgent(Agent):
    """–ê–≥–µ–Ω—Ç, —Å–ø–æ—Å–æ–±–Ω—ã–π –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è"""
    
    def __init__(self, agent_id=None, name=None, decision_style="balanced"):
        super().__init__(
            agent_id=agent_id,
            name=name,
            capabilities=["decision_making", "analysis"],
            max_concurrent_tasks=1
        )
        self.decision_style = decision_style  # balanced, conservative, aggressive
        
    async def _execute_task_impl(self, task: Task):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        await asyncio.sleep(random.uniform(0.5, 2.0))  # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        return {"status": "completed", "agent_style": self.decision_style}
        
    async def handle_message(self, message_type: str, content, sender_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –≤–∫–ª—é—á–∞—è –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"""
        
        if message_type == "vote_request":
            return await self._handle_vote_request(content)
        else:
            return await super().handle_message(message_type, content, sender_id)
            
    async def _handle_vote_request(self, vote_content):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"""
        question = vote_content.get("question", "")
        options = vote_content.get("options", [])
        
        if not options:
            return {"option": None, "confidence": 0.0, "reasoning": "–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞"}
            
        # –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ
        await asyncio.sleep(random.uniform(0.1, 1.0))
        
        # –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∏–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
        if self.decision_style == "conservative":
            # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –∞–≥–µ–Ω—Ç –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –ø–µ—Ä–≤—ã–π (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π) –≤–∞—Ä–∏–∞–Ω—Ç
            chosen_option = options[0]
            confidence = random.uniform(0.7, 0.9)
            reasoning = "–í—ã–±–∏—Ä–∞—é –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥"
            
        elif self.decision_style == "aggressive":
            # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –∞–≥–µ–Ω—Ç –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π (—Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–π) –≤–∞—Ä–∏–∞–Ω—Ç
            chosen_option = options[-1]
            confidence = random.uniform(0.6, 0.8)
            reasoning = "–í—ã–±–∏—Ä–∞—é –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"
            
        else:  # balanced
            # –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–µ–ª–∞–µ—Ç –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
            if "–∫–æ–¥" in question.lower():
                # –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –∫–æ–¥–µ –≤—ã–±–∏—Ä–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                chosen_option = options[len(options) // 2] if len(options) > 2 else options[0]
                confidence = random.uniform(0.8, 0.95)
                reasoning = "–í—ã–±–∏—Ä–∞—é —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
                chosen_option = random.choice(options)
                confidence = random.uniform(0.5, 0.8)
                reasoning = "–í—ã–±–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤"
                
        return {
            "option": chosen_option,
            "confidence": confidence,
            "reasoning": reasoning
        }


async def demonstrate_collective_decisions():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π"""
    
    print("üß† –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π\n")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
    collective_intelligence = CollectiveIntelligence()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
    agents = [
        DecisionMakingAgent(name="–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–æ—Ä-1", decision_style="conservative"),
        DecisionMakingAgent(name="–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–æ—Ä-2", decision_style="conservative"),
        DecisionMakingAgent(name="–ê–≥—Ä–µ—Å—Å–æ—Ä-1", decision_style="aggressive"),
        DecisionMakingAgent(name="–ë–∞–ª–∞–Ω—Å–∏—Ä-1", decision_style="balanced"),
        DecisionMakingAgent(name="–ë–∞–ª–∞–Ω—Å–∏—Ä-2", decision_style="balanced"),
    ]
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
    for agent in agents:
        collective_intelligence.register_agent(agent)
        print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∞–≥–µ–Ω—Ç: {agent.name} ({agent.decision_style})")
        
    print()
    
    # –ù–∞–±–æ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    voting_scenarios = [
        {
            "question": "–ö–∞–∫—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –≤—ã–±—Ä–∞—Ç—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞?",
            "options": ["–ú–æ–Ω–æ–ª–∏—Ç–Ω–∞—è", "–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã", "–ì–∏–±—Ä–∏–¥–Ω–∞—è"],
            "method": VotingMethod.MAJORITY
        },
        {
            "question": "–ö–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?",
            "options": ["Unit-—Ç–µ—Å—Ç—ã", "Integration-—Ç–µ—Å—Ç—ã", "E2E-—Ç–µ—Å—Ç—ã", "–í—Å–µ —Ç–∏–ø—ã"],
            "method": VotingMethod.WEIGHTED
        },
        {
            "question": "–í—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è backend?",
            "options": ["Python", "Java", "Go", "Node.js"],
            "method": VotingMethod.BORDA_COUNT
        },
        {
            "question": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ production?",
            "options": ["Blue-Green", "Rolling Update", "Canary"],
            "method": VotingMethod.CONSENSUS
        }
    ]
    
    # –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
    for i, scenario in enumerate(voting_scenarios, 1):
        print(f"üìä –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ #{i}: {scenario['question']}")
        print(f"   –í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(scenario['options'])}")
        print(f"   –ú–µ—Ç–æ–¥: {scenario['method'].value}")
        
        try:
            decision = await collective_intelligence.make_collective_decision(
                question=scenario["question"],
                options=scenario["options"],
                method=scenario["method"],
                timeout=10.0
            )
            
            print(f"   üèÜ –†–µ—à–µ–Ω–∏–µ: {decision.decision}")
            print(f"   üìà –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {decision.confidence:.2%}")
            print(f"   üó≥Ô∏è  –ì–æ–ª–æ—Å–æ–≤: {len(decision.votes)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–±–∏–≤–∫—É –≥–æ–ª–æ—Å–æ–≤
            vote_breakdown = {}
            for vote in decision.votes:
                option = vote.option
                if option in vote_breakdown:
                    vote_breakdown[option] += 1
                else:
                    vote_breakdown[option] = 1
                    
            print(f"   üìã –†–∞–∑–±–∏–≤–∫–∞: {vote_breakdown}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—é
            print("   üí≠ –ê—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
            for vote in decision.votes:
                agent_name = next(a.name for a in agents if a.id == vote.agent_id)
                print(f"      {agent_name}: {vote.option} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {vote.confidence:.1%}) - {vote.reasoning}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è: {e}")
            
        print()
        
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±–º–µ–Ω–∞ –∑–Ω–∞–Ω–∏—è–º–∏
    print("üìö –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±–º–µ–Ω–∞ –∑–Ω–∞–Ω–∏—è–º–∏:")
    
    # –ê–≥–µ–Ω—Ç—ã –¥–µ–ª—è—Ç—Å—è –∑–Ω–∞–Ω–∏—è–º–∏
    knowledge_items = [
        ("best_practices", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å type hints –≤ Python", agents[0].id, 0.9),
        ("performance", "–ò–Ω–¥–µ–∫—Å—ã —É—Å–∫–æ—Ä—è—é—Ç –ø–æ–∏—Å–∫ –≤ –ë–î", agents[1].id, 0.95),
        ("security", "–í—Å–µ–≥–¥–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥", agents[2].id, 0.85),
        ("best_practices", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å type hints –≤ Python", agents[3].id, 0.8),  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        ("testing", "Mock –≤–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ —Ç–µ—Å—Ç–∞—Ö", agents[4].id, 0.9),
    ]
    
    for key, value, agent_id, confidence in knowledge_items:
        await collective_intelligence.share_knowledge(agent_id, key, value, confidence)
        agent_name = next(a.name for a in agents if a.id == agent_id)
        print(f"   üìù {agent_name} –ø–æ–¥–µ–ª–∏–ª—Å—è –∑–Ω–∞–Ω–∏–µ–º: '{key}' = '{value}'")
        
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–Ω–∞–Ω–∏—è
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–Ω–∞–Ω–∏—è:")
    for key in ["best_practices", "performance", "security", "testing"]:
        knowledge = collective_intelligence.get_collective_knowledge(key)
        if knowledge:
            print(f"   ‚úÖ {key}: {knowledge}")
        else:
            print(f"   ‚ùå {key}: –∑–Ω–∞–Ω–∏–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–æ–º")
            
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ä–æ–µ–≤–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
    print("\nüìä –ú–µ—Ç—Ä–∏–∫–∏ —Ä–æ–µ–≤–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞:")
    metrics = collective_intelligence.get_swarm_intelligence_metrics()
    print(f"   –ê–≥–µ–Ω—Ç–æ–≤: {metrics['registered_agents']}")
    print(f"   –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–Ω–∞–Ω–∏–π: {metrics['knowledge_base_size']}")
    print(f"   –ü—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–π: {metrics['decisions_made']}")
    print(f"   –°—Ä–µ–¥–Ω—è—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤: {metrics['avg_agent_reputation']:.2f}")
    print(f"   –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π: {metrics['confirmed_knowledge_items']}")
    
    # –ê–Ω–∞–ª–∏–∑ —ç–º–µ—Ä–¥–∂–µ–Ω—Ç–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    print("\nüî¨ –ê–Ω–∞–ª–∏–∑ —ç–º–µ—Ä–¥–∂–µ–Ω—Ç–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è:")
    patterns = await collective_intelligence.emergent_behavior_detection()
    
    if "decision_method_preference" in patterns:
        print(f"   –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –º–µ—Ç–æ–¥–∞—Ö –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π: {patterns['decision_method_preference']}")
        
    if "confidence_trend" in patterns:
        trend = patterns["confidence_trend"]
        direction = "—Ä–∞—Å—Ç–µ—Ç" if trend["increasing"] else "–ø–∞–¥–∞–µ—Ç"
        print(f"   –¢—Ä–µ–Ω–¥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–µ—à–µ–Ω–∏—è—Ö: {direction} (—Å—Ä–µ–¥–Ω—è—è: {trend['average']:.2%})")
        
    if "reputation_distribution" in patterns:
        rep = patterns["reputation_distribution"]
        print(f"   –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏: —Å—Ä–µ–¥–Ω–µ–µ={rep['mean']:.2f}, —Ä–∞–∑–±—Ä–æ—Å={rep['std']:.2f}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.WARNING,  # –£–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –≤—ã–≤–æ–¥–∞
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    try:
        await demonstrate_collective_decisions()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
