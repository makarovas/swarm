#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Ä–æ–µ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

def print_menu():
    """–í—ã–≤–æ–¥ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–º–µ—Ä–æ–≤"""
    print("ü§ñ –°–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–Ω–æ–≥–æ —Ä–æ–µ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 50)
    print("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞:")
    print()
    print("1. –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–æ—è")
    print("2. –ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π")
    print("3. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã –ø–æ–¥—Ä—è–¥")
    print("0. –í—ã—Ö–æ–¥")
    print()


async def run_basic_swarm():
    """–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞...")
    try:
        from examples.basic_swarm import main
        await main()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞: {e}")


async def run_collective_decisions():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π"""
    print("üß† –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π...")
    try:
        from examples.collective_decision_making import main
        await main()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π: {e}")


async def run_advanced_programming():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞"""
    print("üèóÔ∏è –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞...")
    try:
        from examples.advanced_swarm_programming import main
        await main()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞: {e}")


async def run_all_examples():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–æ–¥—Ä—è–¥"""
    print("üîÑ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–æ–¥—Ä—è–¥...")
    print()
    
    examples = [
        ("–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä", run_basic_swarm),
        ("–ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è", run_collective_decisions),
        ("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π", run_advanced_programming)
    ]
    
    for name, example_func in examples:
        print(f"\n{'='*60}")
        print(f"üéØ –ó–∞–ø—É—Å–∫: {name}")
        print('='*60)
        
        try:
            await example_func()
            print(f"‚úÖ {name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {name}: {e}")
            
        print("\n" + "‚è±Ô∏è " * 20)
        print("–ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∏–º–µ—Ä–æ–º...")
        await asyncio.sleep(3)
        
    print("\nüéâ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    try:
        import swarm
        return True
    except ImportError:
        print("‚ùå –ú–æ–¥—É–ª—å swarm –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        print("–∏ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    if not check_dependencies():
        return
        
    while True:
        print_menu()
        
        try:
            choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∏–º–µ—Ä–∞ (0-4): ").strip()
            
            if choice == "0":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif choice == "1":
                await run_basic_swarm()
            elif choice == "2":
                await run_collective_decisions()
            elif choice == "3":
                await run_advanced_programming()
            elif choice == "4":
                await run_all_examples()
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            
        if choice in ["1", "2", "3", "4"]:
            input("\nüìã –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")
            print("\n" * 3)  # –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
